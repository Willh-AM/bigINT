/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person
 * or organization obtaining a copy of the software and
 * accompanying documentation covered by this license
 * (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole or
 * in part, and all derivative works of the Software, unless such copies
 * or derivative works are solely in the form of machine-executable
 * object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <algorithm>
#include <bigint.hpp>
#include <istream>
#include <ostream>

namespace libbig {
largeInt largeInt::operator-(const largeInt& _z) {
    largeInt diff;
    largeInt z1 = _z;
    largeInt z2 = *this;
    if (z2.sign && !z1.sign) {
        z1.sign = !z1.sign;
        diff = z2 + z1;
        z1.sign = !z1.sign;
        return diff;
    }
    if (!z2.sign && z1.sign) {
        z2.sign = !z2.sign;
        diff = z2 + z1;
        diff.sign = false;
        z2.sign = !z2.sign;
        return diff;
    }
    if (z2 < z1) {
        largeInt temp = z2;
        z2 = z1;
        z1 = temp;
        diff.sign = false;
    }
    int maxN = std::max(z2.number.length(), z1.number.length());
    int minN = std::min(z2.number.length(), z1.number.length());
    int borrow = 0;
    for (int i = maxN - 1; i >= maxN - minN; i--) {
        int tempDiff = (z2.number[i] - '0') -
                       (z1.number[i - (maxN - minN)] - '0') - borrow;
        if (tempDiff < 0) {
            tempDiff += 10;
            borrow = 1;
        } else {
            borrow = 0;
        }
        diff.number.push_back(tempDiff + '0');
    }
    for (int i = (maxN - minN) - 1; i >= 0; i--) {
        if (z2.number[i] == '0' && borrow) {
            diff.number.push_back('9');
            continue;
        }
        int tempDiff = (z2.number[i] - '0') - borrow;
        if (i > 0 || tempDiff > 0) {
            diff.number.push_back(tempDiff + '0');
        }
        borrow = 0;
    }
    if (!z2.sign && !z1.sign) {
        diff.sign = !diff.sign;
    }

    // Remove zero from the front(after reverse) of number
    while (diff.number.back() == '0')
    {
        diff.number.pop_back();
    }

    std::reverse(diff.number.begin(), diff.number.end());
    return diff;
}
}  // namespace libbig